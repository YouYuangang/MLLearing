/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cif.mllearning.components;

import java.awt.Color;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.openide.util.Exceptions;

/**
 *
 * @author wangcaizhi
 * @create 2019.2.24
 */
public class MessagePanel extends PagePanel {

    private final SimpleAttributeSet normalAttributeSet = new SimpleAttributeSet();
    private final SimpleAttributeSet errorAttributeSet = new SimpleAttributeSet();
    private final SimpleAttributeSet highlightAttributeSet = new SimpleAttributeSet();
    private final LinkedBlockingQueue queue = new LinkedBlockingQueue();//定义一个队列来存储数据
    ScheduledExecutorService exec = Executors.newScheduledThreadPool(1);

    /**
     * Creates new form RunningPanel
     */
    public MessagePanel() {
        initComponents();
        StyleConstants.setForeground(normalAttributeSet, Color.BLACK);
        StyleConstants.setForeground(errorAttributeSet, Color.RED);
        StyleConstants.setForeground(highlightAttributeSet, Color.BLUE);
        StyleConstants.setBold(highlightAttributeSet, true);
        textPane.setEditable(false);
    }

    public void clear() {
        Document doc = textPane.getDocument();
        try {
            doc.remove(0, doc.getLength());
        } catch (BadLocationException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    public void print(String str) {
        insert(str, normalAttributeSet);
    }

    public void println(String str) {
        insert(str + "\n", normalAttributeSet);
    }

    public void printHighlight(String str) {
        insert(str, highlightAttributeSet);
    }

    public void printError(String str) {
        insert(str, errorAttributeSet);
    }

    public void printLine() {
        insert("-----------------------------------------------------------------------------------------\n", highlightAttributeSet);
    }

    public void print(String messageType, String str) {
        if ("print".equals(messageType)) {
            insert(str, normalAttributeSet);
        } else if ("println".equals(messageType)) {
            insert(str + "\n", normalAttributeSet);
        } else if ("printError".equals(messageType)) {
            insert(str, errorAttributeSet);
        } else if ("printHighlight".equals(messageType)) {
            insert(str, highlightAttributeSet);
        } else if ("printLine".equals(messageType)) {
            printLine();
        }
    }

    private void insert(String str, AttributeSet attrset) {
        Document doc = textPane.getDocument();
        int length = doc.getLength();
        try {
            doc.insertString(length, str, attrset);
            textPane.setCaretPosition(doc.getLength());
        } catch (BadLocationException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        clearButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cif/mllearning/icons/brush16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(MessagePanel.class, "MessagePanel.clearButton.text")); // NOI18N
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearButton);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setViewportView(textPane);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
      clear();
    }//GEN-LAST:event_clearButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "运行结果";
    }

    @Override
    public String getIconName() {
        return "runningOutput16.png";
    }

    @Override
    public String getID() {
        return "running";
    }
}
