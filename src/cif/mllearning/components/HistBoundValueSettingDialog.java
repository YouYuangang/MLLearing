/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cif.mllearning.components;

import cif.baseutil.components.propertysheet.render.DefaultCellRenderer;
import cif.mllearning.base.HistMaxMinValue;
import com.lowagie.text.Table;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author 10797
 */
public class HistBoundValueSettingDialog extends javax.swing.JDialog {

    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    private int returnStatus = RET_CANCEL;
    private List<Vector<Object>> list;
    private DefaultTableModel tableModel;

    /**
     * Creates new form HistBoundValueSettingDialog
     */
    public HistBoundValueSettingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tableModel = (DefaultTableModel) settingTable.getModel();
        DefaultCellRenderer renderer = new DefaultCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        settingTable.setDefaultRenderer(Object.class, renderer);

        DefaultTableCellRenderer hr = new DefaultTableCellRenderer();
        hr.setHorizontalAlignment(JLabel.CENTER);
        settingTable.getTableHeader().setDefaultRenderer(hr);

    }

    public List<Vector<Object>> getList() {
        if (list == null) {
            this.list = new ArrayList<>();
        }
        for (int i = 0; i < tableModel.getRowCount() - 1; i++) {
            Vector<Object> vector = new Vector<>();
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                vector.add(tableModel.getValueAt(i, j));
            }
            list.add(vector);
        }
        return list;
    }

    public void setList(List<Vector<Object>> list) {
        this.list = list;
        for (int i = 0; i < list.size(); i++) {
            tableModel.addRow(list.get(i));
        }
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        settingTable = new javax.swing.JTable();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        settingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "曲线名", "最小值", "最大值"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        settingTable.setColumnSelectionAllowed(true);
        settingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(settingTable);
        settingTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (settingTable.getColumnModel().getColumnCount() > 0) {
            settingTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.settingTable.columnModel.title0")); // NOI18N
            settingTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.settingTable.columnModel.title1")); // NOI18N
            settingTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.settingTable.columnModel.title2")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(okBtn, org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.okBtn.text")); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelBtn, org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.cancelBtn.text")); // NOI18N
        cancelBtn.setToolTipText(org.openide.util.NbBundle.getMessage(HistBoundValueSettingDialog.class, "HistBoundValueSettingDialog.cancelBtn.toolTipText")); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(okBtn)
                        .addGap(54, 54, 54)
                        .addComponent(cancelBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn)
                    .addComponent(cancelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        // TODO add your handling code here:
        doClose(RET_OK);
    }//GEN-LAST:event_okBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistBoundValueSettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistBoundValueSettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistBoundValueSettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistBoundValueSettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HistBoundValueSettingDialog dialog = new HistBoundValueSettingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okBtn;
    private javax.swing.JTable settingTable;
    // End of variables declaration//GEN-END:variables
}
