/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cif.mllearning.components;

import cif.mllearning.utils.HistCustomRenderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.geom.Rectangle2D;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.statistics.HistogramDataset;

/**
 *
 * @author 10797
 */
public class HistDatePreprocessDIalog extends javax.swing.JDialog {

    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    private int returnStatus = RET_CANCEL;

    private ChartPanel chartPanel;

    private int binCount;
    private int leftIndex;
    private int rightIndex;

    private double leftValue;
    private double rightValue;

    private int LEFT_ACTION = 0;
    private int RIGHT_ACTION = 1;
    private int action = LEFT_ACTION;

    private boolean reverse = false;

    private Color color = new Color(9, 154, 203);

    /**
     * Creates new form HistDatePreprocessDIalog
     */
    public HistDatePreprocessDIalog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        mainPanel.setLayout(new FlowLayout());
        this.setLocation(parent.getWidth() / 3, parent.getHeight() / 5);

    }

    public void setChartPanel(ChartPanel chartPanel) {
        this.chartPanel = chartPanel;
        binCount = this.chartPanel.getChart().getXYPlot().getDataset().getItemCount(0);
        leftIndex = -1;
        rightIndex = binCount;

        chartPanel.setPreferredSize(new Dimension(730, 300));
        addMouseListener();
        mainPanel.add(this.chartPanel);

    }

    public void setColor(Color c) {
        this.color = c;
    }

    public double getLeftValue() {
        return leftValue;
    }

    public double getRightValue() {
        return rightValue;
    }

    public boolean getReverse() {
        return reverse;
    }

    private void addMouseListener() {
        chartPanel.addChartMouseListener(new ChartMouseListener() {
            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {

                if (cme.getTrigger().getClickCount() >= 1) {

                    XYPlot plot = chartPanel.getChart().getXYPlot();

                    //坐标转换，将鼠标的绝对坐标 转化成chart的相对坐标
                    int absX = cme.getTrigger().getX();
                    Rectangle2D plotArea = chartPanel.getScreenDataArea();
                    double chartX = plot.getDomainAxis().java2DToValue(absX, plotArea, plot.getDomainAxisEdge());

                    HistogramDataset dataset = (HistogramDataset) plot.getDataset();

                    for (int i = 0; i < binCount; i++) {
                        double startX = dataset.getStartXValue(0, i);
                        double endX = dataset.getEndXValue(0, i);

                        if (chartX >= startX && chartX < endX) {
                            switch (action) {
                                case 0:
                                    leftIndex = i;
                                    break;
                                case 1:
                                    rightIndex = i;
                                    break;
                                default:
                                    break;
                            }
                            break;
                        }
                    }

                    XYBarRenderer xYBarRenderer = new HistCustomRenderer(color, leftIndex, rightIndex);
                    xYBarRenderer.setBarPainter(new StandardXYBarPainter());
                    xYBarRenderer.setShadowVisible(false);
                    plot.setRenderer(xYBarRenderer);

                }
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
                return;
            }
        });
    }

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftBtn = new javax.swing.JButton();
        revBtn = new javax.swing.JButton();
        rightBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 460));
        setSize(new java.awt.Dimension(800, 460));

        org.openide.awt.Mnemonics.setLocalizedText(leftBtn, org.openide.util.NbBundle.getMessage(HistDatePreprocessDIalog.class, "HistDatePreprocessDIalog.leftBtn.text")); // NOI18N
        leftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(revBtn, org.openide.util.NbBundle.getMessage(HistDatePreprocessDIalog.class, "HistDatePreprocessDIalog.revBtn.text")); // NOI18N
        revBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(rightBtn, org.openide.util.NbBundle.getMessage(HistDatePreprocessDIalog.class, "HistDatePreprocessDIalog.rightBtn.text")); // NOI18N
        rightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okBtn, org.openide.util.NbBundle.getMessage(HistDatePreprocessDIalog.class, "HistDatePreprocessDIalog.okBtn.text")); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelBtn, org.openide.util.NbBundle.getMessage(HistDatePreprocessDIalog.class, "HistDatePreprocessDIalog.cancelBtn.text")); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        mainPanel.setPreferredSize(new java.awt.Dimension(750, 320));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(okBtn)
                .addGap(179, 179, 179)
                .addComponent(cancelBtn)
                .addGap(240, 240, 240))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftBtn)
                        .addGap(83, 83, 83)
                        .addComponent(rightBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(revBtn)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftBtn)
                    .addComponent(revBtn)
                    .addComponent(rightBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn)
                    .addComponent(cancelBtn))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void revBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revBtnActionPerformed
        // TODO add your handling code here:
        this.reverse = !this.reverse;
        XYPlot plot = chartPanel.getChart().getXYPlot();
        XYBarRenderer xYBarRenderer = new HistCustomRenderer(color, leftIndex, rightIndex, this.reverse);
        xYBarRenderer.setBarPainter(new StandardXYBarPainter());
        xYBarRenderer.setShadowVisible(false);
        plot.setRenderer(xYBarRenderer);
    }//GEN-LAST:event_revBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        //这里需要将得到一个 leftValue and rightValue 然后对其进行过滤操作
        // TODO add your handling code here:
        if (leftIndex == -1) {
            leftValue = ((HistogramDataset) chartPanel.getChart().getXYPlot().getDataset()).getEndXValue(0, 0);
        } else {
            leftValue = ((HistogramDataset) chartPanel.getChart().getXYPlot().getDataset()).getEndXValue(0, leftIndex);
        }
        
        if (rightIndex == binCount) {
            rightValue = ((HistogramDataset) chartPanel.getChart().getXYPlot().getDataset()).getStartXValue(0, rightIndex - 1);
        } else {
            rightValue = ((HistogramDataset) chartPanel.getChart().getXYPlot().getDataset()).getStartXValue(0, rightIndex);
        }
        doClose(RET_OK);

    }//GEN-LAST:event_okBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        doClose(RET_CANCEL);
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void leftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBtnActionPerformed
        // TODO add your handling code here:
        this.action = LEFT_ACTION;
        this.reverse = false;
    }//GEN-LAST:event_leftBtnActionPerformed

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed
        // TODO add your handling code here:
        this.action = RIGHT_ACTION;
        this.reverse = false;
    }//GEN-LAST:event_rightBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistDatePreprocessDIalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistDatePreprocessDIalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistDatePreprocessDIalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistDatePreprocessDIalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HistDatePreprocessDIalog dialog = new HistDatePreprocessDIalog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton leftBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okBtn;
    private javax.swing.JButton revBtn;
    private javax.swing.JButton rightBtn;
    // End of variables declaration//GEN-END:variables
}
